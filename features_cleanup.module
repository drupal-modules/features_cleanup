<?php

/**
 * Implements hook_menu().
 */
function features_cleanup_menu() {
  $items['admin/structure/features/%feature/resolve_overrides'] = array(
    'title' => 'Resolve Overrides',
    'description' => 'Resolve pesky overrides by deleting default based on current feature.',
    'page callback' => 'features_cleanup_diff',
    'page arguments' => array(3, 5),
    'load arguments' => array(3, TRUE),
    'access callback' => 'features_access_override_actions',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/features/%feature/resolve_overrides/perform'] = array(
    'title' => 'Performing Resolution of all Overrides',
    'description' => 'Resolve pesky overrides by deleting default based on current feature.',
    'page callback' => 'features_cleanup_override_perform',
    'page arguments' => array(3, 5),
    'load arguments' => array(3, TRUE),
    'access callback' => 'features_access_override_actions',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/features/sync-features'] = array(
    'title' => 'Sync Features',
    'description' => 'Resolve content type, panels, vocabularies, and image styles by deleting default based on all feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_cleanup_sync_features_form'),
    'access arguments' => array('Administer content'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function features_cleanup_sync_features_form($form, $form_state) {
  $form['info'] = array(
    '#markup' => 
      '<p>' . t('WARNING: You are about to sync all the features on your site. Doing this will delete any content types, panels, vocabularies, and image styles not contained within features.') . '</p>'.
      '<p>' . t('Are you sure you wish to continue?') . '</p>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Sync all features'),
  );
  return $form;
}

function features_cleanup_sync_features_form_submit($form, &$form_state) {
  features_cleanup_perform();
  drupal_set_message(t('All features have now been synced. All content types, panels, vocabularies, and image styles not controlled via features have been deleted.'));
  drupal_goto('admin/structure/features');
}

/**
 * Perform a cleanup of content types, page manager pages (node panels), mini panels, taxonomy vocabs, image styles.
 */
function features_cleanup_perform() {
  $features = features_get_features();
  $content_types = array();
  $mini_panels = array();
  $fpages = array();
  $vocabs = array();
  foreach ($features as $i => $feature) {
    if ($feature->status) {
      // Delete all fields and then prepare additional deletions.
      features_cleanup_override_perform($feature);

      if (isset($feature->info['features']['node'])) {
        foreach ($feature->info['features']['node'] as $j => $content_type) {
          $content_types[] = $content_type;
        }
      }
      if (isset($feature->info['features']['page_manager_pages'])) {
        foreach ($feature->info['features']['page_manager_pages'] as $j => $page) {
          $fpages[] = $page;
        }
      }
      if (isset($feature->info['features']['panels_mini'])) {
        foreach ($feature->info['features']['panels_mini'] as $j => $panel) {
          $mini_panels[] = $panel;
        }
      }
      if (isset($feature->info['features']['taxonomy'])) {
        foreach ($feature->info['features']['taxonomy'] as $j => $vocab) {
          $vocabs[] = $vocab;
        }
      }
      if (isset($feature->info['features']['image'])) {
        foreach ($feature->info['features']['image'] as $j => $style) {
          $styles[] = $style;
        }
      }
    }
  }

  // Sync Content Types
  $all_content_types_in_db = node_type_get_types();
  foreach ($all_content_types_in_db as $id => $obj) {
    if ((array_search($id, $content_types) === FALSE) && ($obj->custom == TRUE)) {
      drupal_set_message(t('Features Cleanup deleted content type !ct-name (id: !ct-id) from the database.', array('!ct-name' => $obj->name, '!ct-id' => $id)));
      node_type_delete($id);
    }
  }

  // Sync Panel Pages
  if (module_exists('page_manager')) {
    module_load_include('inc', 'page_manager', 'page_manager.admin');
    $tasks = page_manager_get_tasks_by_type('page');
    $pages = array('operations' => array(), 'tasks' => array());
    page_manager_get_pages($tasks, $pages);
    $dpages = array();
    foreach ($pages['rows'] as $i => $v) {
      if ($v['data']['type']['data'] == 'Custom') {
        $dpages[] = $i;
      }
    }
    foreach ($fpages as $i => $v) {
      $fpages[$i] = 'page-' . $v;
    }
    foreach ($dpages as $id => $page) {
      if (array_search($page, $fpages) === FALSE) {
        $page = str_replace('page-', '', $page);
        $p = page_manager_page_load($page);
        drupal_set_message(t('Features Cleanup deleted page !p-name (id: !p-id) at !p-path from the database.', array('!p-name' => $p->admin_title, '!p-id' => $p->pid, '!p-path' => $p->path)));
        page_manager_page_delete($p);
      }
    }
  }

  if (module_exists('panels_mini')) {
    // Sync Mini panels
    $dpanels = panels_mini_load_all();
    foreach ($dpanels as $id => $panel) {
      if (array_search($id, $mini_panels) === FALSE) {
        $p = panels_mini_load($id);
        drupal_set_message(t('Features Cleanup deleted mini panel !p-name (id: !p-id) from the database.', array('!p-name' => $p->admin_title, '!p-id' => $p->pid)));
        panels_mini_delete($p);
      }
    }
  }

  if (module_exists('taxonomy')) {
    // Sync Vocabs
    $dvocabs = taxonomy_vocabulary_get_names();
    foreach ($dvocabs as $id => $vocab) {
      if (array_search($id, $vocabs) === FALSE) {
        drupal_set_message(t('Features Cleanup deleted taxonomy !t-name (id: !t-id) from the database.', array('!t-name' => $vocab->name, '!t-id' => $vocab->vid)));
        taxonomy_vocabulary_delete($vocab->vid);
      }
    }
  }

  if (module_exists('image')) {
    // Sync Image Styles
    $dstyles = image_styles();
    foreach ($dstyles as $id => $style) {
      if (isset($style['isid']) && array_search($id, $styles) === FALSE) {
        drupal_set_message(t('Features Cleanup deleted image style !is-name (id: !is-id) from the database.', array('!is-name' => $style['name'], '!is-id' => $style['isid'])));
        image_style_delete($style);
      }
    }
  }

  return TRUE;
}

/**
 * Returns a diff object for a feature in the code. Pass in a component to run a diff only on that component.
 * 
 * @param $feature
 *   A loaded feature object to display differences for.
 * @param $component
 *   Optional: specific component to display differences for. If excluded, all components are used.
 */
function features_cleanup_get_diff($feature, $component = NULL) {
  module_load_include('inc', 'features', 'features.export');
  $overrides = features_detect_overrides($feature);

  $output = '';
  if (!empty($overrides)) {
    // Filter overrides down to specified component.
    if (isset($component) && isset($overrides[$component])) {
      $overrides = array($component => $overrides[$component]);
    }

    module_load_include('inc', 'diff', 'diff.engine');
    foreach ($overrides as $component => $items) {
      $diff[$component] = new Diff(explode("\n", $items['default']), explode("\n", $items['normal']));
    }
  }
  else {
    return array();
  }
  return $diff;
}


/**
 * Page callback to display the differences between what's in code and
 * what is in the db.
 *
 * @param $feature
 *   A loaded feature object to display differences for.
 * @param $component
 *   Optional: specific component to display differences for. If excluded, all components are used.
 *
 * @return Themed display of what is different.
 */
function features_cleanup_diff($feature, $component = NULL) {
  drupal_add_css(drupal_get_path('module', 'features') . '/features.css');

  $output = '';
  module_load_include('inc', 'diff', 'diff.engine');
  $formatter = new DrupalDiffFormatter(); //- temporarily broken
  //$formatter = new DiffFormatter();
  $formatter->leading_context_lines = 2;
  $formatter->trailing_context_lines = 2;
  //$formatter->show_header = $show_header
   
  $rows = array();
  $all_diffs = features_cleanup_get_diff($feature, $component);
  if ($all_diffs != array()) {
    foreach ($all_diffs as $component => $diff) {
      $rows[] = array(array(array('data' => $component, 'colspan' => 4, 'header' => TRUE)));
      //dpm($formatter->format($diff));
      $rows = array_merge($rows, $formatter->format($diff));
    }
    $header = array(
      array('data' => t('Default'), 'colspan' => 2),
      array('data' => t('Overrides'), 'colspan' => 2),
    );
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('diff', 'features-diff'))));
    $output .= l('Resolve All Overrides', 'admin/structure/features/' . $feature->name . '/resolve_overrides/perform');
  }
  else {
    $output = "<div class='features-empty'>" . t('No changes have been made to this feature.') . "</div>";
  }
  $output = array('page' => array('#markup' => "<div class='features-comparison'>{$output}</div>"));
  return $output;
}

/**
 * Perform override resolution on a particular feature, component.
 *
 * @param $feature
 *   A loaded feature object to display differences for.
 * @param $component
 *   Optional: specific component to display differences for. If excluded, all components are used.
 * @param $drush
 *   Optional: Whether drush is being used or not.
 *  
 */
function features_cleanup_override_perform($feature, $component = NULL, $redirect = FALSE) {
  $feature_name = $feature->name;
  $all_diffs = features_cleanup_get_diff($feature, $component);

  // Delete fields
  foreach ($all_diffs as $component => $feature) {
    if ($component == 'info') {
      foreach ($feature->edits as $i => $diff_obj) {
        if ($diff_obj->orig == '' && strpos($diff_obj->closing[0], '[field]')) {
          $diff_obj->closing[0] = str_replace('"', '', $diff_obj->closing[0]);
          $arr = explode('-', $diff_obj->closing[0]);
          _features_cleanup_delete_field($arr[1], $arr[2]);
        }
      }
    }
  }

  // Delete content types
  if ($redirect) {
    drupal_goto('admin/structure/features/' . $feature_name . '/resolve_overrides');
  }
}

function _features_cleanup_delete_field($content_type, $field) {
  $field_info = field_info_field($field);
  $count = 0;
  $deleted = FALSE;
  if (isset($field_info['bundles'])) {
    foreach ($field_info['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $count++;
        if ($bundle == $content_type) {
          drupal_set_message(t('Features Cleanup deleted field !f-name (id: !f-id) from the "!content-type" content type.', array('!f-name' => $field_info['field_name'], '!f-id' => $field_info['id'], '!content-type' => $bundle)));
          $instance = field_info_instance($entity_type, $field, $bundle);
          field_delete_instance($instance, FALSE);
          $deleted = TRUE;
        }
      }
    }
    if ($count == 1 && $deleted) {
      drupal_set_message(t('Features Cleanup deleted field !f-name (id: !f-id) entirely as the reference in the "!content-type" content type was the last remaining reference.', array('!f-name' => $field_info['field_name'], '!f-id' => $field_info['id'], '!content-type' => $bundle)));
      field_delete_field($field);
    }
  }
}
